class Solution:
    def minimumFuelCost(self, roads: List[List[int]], seats: int) -> int:
        def dfs(u):
            seen.add(u)
            nRep = 1 + sum(dfs(v) for v in tree[u] if v not in seen)
            ans[0] += ceil(nRep / seats) if u else 0
            return nRep
        tree, seen, ans = defaultdict(list), set(), [0]
        for u, v in roads: tree[u].append(v), tree[v].append(u)
        return not dfs(0) or ans[0]
