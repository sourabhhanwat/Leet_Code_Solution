class Solution(object):
    def minInsertions(self, s):
        # reverse the input string
        reversed_s = s[::-1]
        # get the length of the input string
        n = len(s)
        # create a 2D array to store the LCS of substrings
        dp = [[0 for j in range(n+1)] for i in range(n+1)]
        
        # fill up the dp array using dynamic programming approach
        for i in range(1, n+1):
            for j in range(1, n+1):
                if s[i-1] == reversed_s[j-1]:
                    # if characters match, add 1 to LCS
                    dp[i][j] = dp[i-1][j-1] + 1
                else:
                    # otherwise, take maximum LCS of two substrings
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])
        
        # return the minimum number of insertions required to make s a palindrome
        # this is the difference between the length of s and the length of its LCS
        return n - dp[n][n]
